import asyncio
import random
import time
import os
import json
from telethon import TelegramClient, events, Button
from gtts import gTTS

api_id = 23656695
api_hash = 'fd1f248529524dde45cb918affe78982'
MY_USER_ID = 7341413250  # –¢–≤—ñ–π user_id

client = TelegramClient('ppiiba', api_id, api_hash)

start_time = time.time()
command_counter = 0

quotes = [
    "–í—ñ—Ä —É —Å–µ–±–µ —ñ –≤—Å–µ —Å—Ç–∞–Ω–µ –º–æ–∂–ª–∏–≤–∏–º.",
    "–ù–µ –±—ñ–π—Å—è –ø–æ–º–∏–ª–æ–∫ ‚Äî –≤–æ–Ω–∏ –∫—Ä–æ–∫ –¥–æ —É—Å–ø—ñ—Ö—É.",
    "–ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å.",
    "–†–æ–±–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–µ, —â–æ —ñ–Ω—à—ñ –Ω–µ —Ö–æ—á—É—Ç—å, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à –º–∞—Ç–∏ —Ç–µ, —â–æ —ñ–Ω—à—ñ –Ω–µ –º–æ–∂—É—Ç—å.",
    "–£—Å–ø—ñ—Ö ‚Äî —Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑—É—Å–∏–ª—å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—Ö —â–æ–¥–Ω—è."
]

# --- –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø–æ—Å—Ç—ñ–π–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º ---
MSG_FILE = "msg_counter.json"
if os.path.exists(MSG_FILE):
    with open(MSG_FILE, "r") as f:
        chat_counters = json.load(f)
else:
    chat_counters = {}

def save_counters():
    with open(MSG_FILE, "w") as f:
        json.dump(chat_counters, f)

def increment_counter():
    global command_counter
    command_counter += 1

def is_me(event):
    return event.sender_id == MY_USER_ID

# --- –†–∞—Ö—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
@client.on(events.NewMessage)
async def count_messages(event):
    chat_id = str(event.chat_id)
    chat_counters[chat_id] = chat_counters.get(chat_id, 0) + 1
    save_counters()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@client.on(events.NewMessage(pattern=r'/msgcount'))
async def msg_count(event):
    if not is_me(event):
        return
    chat_id = str(event.chat_id)
    count = chat_counters.get(chat_id, 0)
    await event.reply(f"–£ —Ü—å–æ–º—É —á–∞—Ç—ñ –±–æ—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞–≤ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å üìä")
    await event.delete()

# --- –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ---
@client.on(events.NewMessage(pattern=r'/quote'))
async def send_quote(event):
    if not is_me(event):
        return
    increment_counter()
    await event.reply(random.choice(quotes))
    await event.delete()

@client.on(events.NewMessage(pattern=r'/ping'))
async def pong(event):
    if not is_me(event):
        return
    increment_counter()
    await event.reply('Pong!')
    await event.delete()

@client.on(events.NewMessage(pattern=r'/info'))
async def info(event):
    if not is_me(event):
        return
    increment_counter()
    await event.reply('–¶–µ —Ç–≤—ñ–π –∫—Ä—É—Ç–∏–π —é–∑–µ—Ä–±–æ—Ç! üëë')
    await asyncio.sleep(2)
    await event.delete()

@client.on(events.NewMessage(pattern=r'/h'))
async def help_cmd(event):
    if not is_me(event):
        return
    increment_counter()
    help_text = (
        "/myt @–Ω—ñ–∫ —Ö–≤–∏–ª–∏–Ω–∏ - –±–ª–æ–∫—É–≤–∞–Ω–Ω—è\n"
        "/sk 1-3 - –∑–º—ñ–Ω–∏—Ç–∏ —à—Ä–∏—Ñ—Ç\n"
        "/spavn –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç - —Å–ø–∞–º\n"
        "/ping - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\n"
        "/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        "/rainbow - –≤–µ—Å–µ–ª–∫–∞\n"
        "/quote - –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ü–∏—Ç–∞—Ç–∞\n"
        "/voice [—Ç–µ–∫—Å—Ç] - –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç—É\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/msgcount - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ\n"
        "/h - –¥–æ–ø–æ–º–æ–≥–∞\n"
        "/getid - —Ç–≤—ñ–π user_id\n"
        "/tictactoe [@–Ω—ñ–∫] - –≥—Ä–∞ –•—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏"
    )
    await event.reply(help_text)
    await event.delete()

@client.on(events.NewMessage(pattern=r'/voice (.+)'))
async def voice_message(event):
    if not is_me(event):
        return
    increment_counter()
    text = event.pattern_match.group(1)
    tts = gTTS(text=text, lang='uk')
    filename = "voice.mp3"
    tts.save(filename)
    await client.send_file(event.chat_id, filename, voice_note=True)
    os.remove(filename)
    await event.delete()

@client.on(events.NewMessage(pattern=r'/stats'))
async def stats(event):
    if not is_me(event):
        return
    increment_counter()
    uptime = time.time() - start_time
    uptime_str = f"{int(uptime // 3600)} –≥–æ–¥ {(int(uptime) % 3600) // 60} —Ö–≤"
    text = f"–ö–æ–º–∞–Ω–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ: {command_counter}\n–ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime_str}"
    await event.reply(text)
    await event.delete()

@client.on(events.NewMessage(pattern=r'/getid'))
async def get_my_id(event):
    await event.reply(f"–¢–≤—ñ–π user_id: {event.sender_id}")

# --- –ì—Ä–∞ "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏" ---
active_games = {}

def new_game(player1_id, player2_id):
    return {
        "board": [" "]*9,
        "turn": player1_id,
        "players": [player1_id, player2_id],
        "symbols": {player1_id: "‚ùå", player2_id: "‚≠ï"},
        "moves": 0
    }

def render_board(board):
    rows = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell = board[i+j]
            text = cell if cell != " " else "‚ñ´Ô∏è"
            row.append(Button.inline(text, data=str(i+j)))
        rows.append(row)
    return rows

def check_win(board, symbol):
    win_positions = [
        [0,1,2], [3,4,5], [6,7,8],
        [0,3,6], [1,4,7], [2,5,8],
        [0,4,8], [2,4,6]
    ]
    return any(all(board[i] == symbol for i in pos) for pos in win_positions)

@client.on(events.NewMessage(pattern=r'/tictactoe(?:\s+@(\w+))?'))
async def tictactoe_start(event):
    if not is_me(event):
        return
    player1 = event.sender_id
    username = event.pattern_match.group(1)
    if username:
        try:
            entity = await client.get_entity(username)
            player2 = entity.id
        except:
            await event.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
    else:
        player2 = player1

    game = new_game(player1, player2)
    active_games[event.chat_id] = game
    board_buttons = render_board(game["board"])
    await event.reply(f"–ì—Ä–∞ –•—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ –ø–æ—á–∞–ª–∞—Å—è!\n–•—ñ–¥: {game['symbols'][game['turn']]}", buttons=board_buttons)
    await event.delete()

@client.on(events.CallbackQuery)
async def callback_handler(event):
    chat_id = event.chat_id
    user_id = event.sender_id
    if chat_id not in active_games:
        await event.answer("–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
    game = active_games[chat_id]
    if user_id != game["turn"]:
        await event.answer("–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤—ñ–π —Ö—ñ–¥!")
        return
    pos = int(event.data.decode('utf-8'))
    if game["board"][pos] != " ":
        await event.answer("–¶—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞.")
        return
    symbol = game["symbols"][user_id]
    game["board"][pos] = symbol
    game["moves"] += 1

    if check_win(game["board"], symbol):
        board_buttons = render_board(game["board"])
        await event.edit(f"–ì—Ä–∞–≤–µ—Ü—å {symbol} –ø–µ—Ä–µ–º—ñ–≥! üéâ", buttons=board_buttons)
        del active_games[chat_id]
        return
    elif game["moves"] == 9:
        board_buttons = render_board(game["board"])
        await event.edit("–ù—ñ—á–∏—è! ü§ù", buttons=board_buttons)
        del active_games[chat_id]
        return

    game["turn"] = game["players"][0] if game["turn"] == game["players"][1] else game["players"][1]
    board_buttons = render_board(game["board"])
    await event.edit(f"–•—ñ–¥: {game['symbols'][game['turn']]}", buttons=board_buttons)
    await event.answer()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await client.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await client.run_until_disconnected()

asyncio.run(main())
